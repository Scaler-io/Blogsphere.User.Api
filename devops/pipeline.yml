trigger:
  batch: true
  branches:
    include:
      - main
      - feature/**
      - hotfix/**

pr:
  branches:
    include:
      - main

pool:
  vmImage: ubuntu-latest

variables:
  project: "**/Blogsphere.User.Api.csproj"
  buildPlatform: "Any CPU"
  buildConfiguration: "Release"
  dotnetVersion: "8.x"
  githubConnection: "github.com_sharthak1095"
  repositoryName: "Scaler-io/Blogsphere.User.Api"
  imageName: "sharthak1995/blogsphere.user.svc"
  containerRegistry: "docker-hub-sharthak1995-connection"

stages:
  # - stage: Build
  #   displayName: "Build User Api"
  #   jobs:
  #     - job: build
  #       displayName: "Build job"
  #       steps:
  #         - template: ./build/build.yml
  #           parameters:
  #             project: $(project)
  #             buildConfiguration: $(buildConfiguration)
  #             buildPlatform: $(buildPlatform)
  #             dotnetVersion: $(dotnetVersion)

  - stage: GithubRelease
    displayName: "Github release"
    # condition: and(succeeded(), notIn(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs:
      - deployment: CreateRelease
        displayName: "Crete Github release job"
        environment: blogsphere-user-api-github-release-env
        strategy:
          runOnce:
            deploy:
              steps:
                - template: ./deploy/github-release.yml
                  parameters:
                    githubConnection: $(githubConnection)
                    repositoryName: $(repositoryName)

  - stage: DockerBuildAndPush
    displayName: "Docker build and push"
    dependsOn: GithubRelease
    # condition: and(succeeded(), notIn(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    variables:
      RELEASE_TAG: $[ stageDependencies.GithubRelease.CreateRelease.outputs['setReleaseTag.RELEASE_TAG'] ]
    jobs:
      - deployment: DockerBuildAndPush
        displayName: "Docker build and push job"
        environment: blogsphere-user-api-docker-env
        strategy:
          runOnce:
            deploy:
              steps:
                - template: ./deploy/docker.yml
                  parameters:
                    imageName: $(imageName)
                    tag: $(RELEASE_TAG)
                    containerRegistry: $(containerRegistry)
